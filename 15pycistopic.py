# %%
import argparse
import scanpy as sc
import pycisTopic
from pycisTopic.cistopic_class import *
import pickle
import os
from pycisTopic.lda_models import run_cgs_models_mallet

parser = argparse.ArgumentParser(description="Calculate the methlyation level for a given region")
parser.add_argument("--input", type=str, required=False, help="Input file for the h5ad generated by snapATAC2",
                    default="output/atac0416/3REGIONS_peak.h5ads")
parser.add_argument("--output", type=str, required=False, help="Output path of the result",
                    default="/data1st2/junyi/output/atac0416/subset/")
#parser.add_argument("--celltype", type=str, required=False, help="Select cell type in obs",default="Neuron")
parser.add_argument("--tempdir", type=str, required=False, help="Temporary directory",default="/data1st2/junyi/tmp")
parser.add_argument("--cpu", type=int, required=False, help="Number of CPUs",default=32)
parser.add_argument("--mallet_path", type=str, required=False, help="Path to mallet",default="/home/junyichen/Mallet-202108/bin/mallet")
args = parser.parse_args()

os.environ['MALLET_MEMORY'] = '200G'

input_file = args.input
output_path = args.output
tempdir = args.tempdir
cpu = args.cpu
mallet_path = args.mallet_path

filename = os.path.basename(input_file).split('.')[0]

# %%
adata = sc.read_h5ad(input_file)

# %%
gene_peak_matrix = adata.layers['count'].T.tocsr()
#gene_peak_matrix = adata.X.T.tocsr()

# %%
cell_data = adata.obs
gene_data = adata.var

# %%
type(gene_peak_matrix)

# %%
pycis_topic_obj = create_cistopic_object(
    fragment_matrix=gene_peak_matrix,
    cell_names=cell_data.index.tolist(),
    region_names=gene_data.index.tolist()
)

# %%
pycis_topic_obj.add_cell_data(cell_data, split_pattern='__')

# %%
pycis_topic_obj.add_region_data(gene_data)

# %%
pycis_topic_obj.cell_data['ACC:celltype.L2']= pycis_topic_obj.cell_data['celltype.L2'].astype('category')
pycis_topic_obj.cell_data['condtion'] = pycis_topic_obj.cell_data['expriment'].astype('category')
pycis_topic_obj.cell_data['ACC:condtion'] = pycis_topic_obj.cell_data['condtion'].astype('category')


pickle.dump(
    pycis_topic_obj,
    open(os.path.join(output_path, f"cistopic_{filename}.pkl"), "wb")
)
# %%

cistopic_out = os.path.join(output_path, f"cistopic_{filename}_out") 
if not os.path.exists(cistopic_out):
    os.makedirs(cistopic_out)

models=run_cgs_models_mallet(
    pycis_topic_obj,
    n_topics=[10,20,30,40,50],
    n_cpu=args.cpu,
    n_iter=500,
    random_state=555,
    alpha=50,
    alpha_by_topic=True,
    eta=0.1,
    eta_by_topic=False,
    tmp_path=tempdir,
    save_path=cistopic_out,
    mallet_path=mallet_path,
)

pickle.dump(
    models,
    open(os.path.join(output_path, f"cistopic_{filename}_models.pkl"), "wb")
)