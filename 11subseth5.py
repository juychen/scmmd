# %%
import matplotlib.pyplot as plt
import anndata
import scanpy as sc
import snapatac2 as snap
import numpy as np
import pandas as pd
import os
import scanpy.external as sce
import argparse
import memento
from sklearn.preprocessing import LabelEncoder
#adata_concat = snap.read_dataset('output/mouse_brain.h5ads')

parser = argparse.ArgumentParser(description="Calculate the methlyation level for a given region")
parser.add_argument("--input", type=str, required=False, help="Input file for the h5ad generated by snapATAC2",
                    default="output/atac0416/3REGIONS_peak.h5ads")
parser.add_argument("--output", type=str, required=False, help="Output path of the result",
                    default="/data1st2/junyi/output/atac0416/subset/")
#parser.add_argument("--celltype", type=str, required=False, help="Select cell type in obs",default="Neuron")
parser.add_argument("--region", type=str, required=False, help="Brain region",default="PFC")
parser.add_argument("--celltype_column", type=str, required=False, help="Column for cell type",default="region_nt")
parser.add_argument("--method", type=str, required=False, help="Method for analysis",default="memento-ht")
parser.add_argument("--cpu", type=int, required=False, help="Number of CPUs",default=32)
parser.add_argument("--cov_column", type=str, required=False, help="Covariate column in the adata.obs",default="farcq")
parser.add_argument("--capture_rate", type=float, required=False, help="Capture rate for the region",default=0.15)


args = parser.parse_args()

# %%
file = args.input
region = args.region
#celltype = args.celltype
celltype_column = args.celltype_column

covariate_column = args.cov_column
adata = anndata.read_h5ad(file)
adata = adata[(adata.obs['sample'].str.contains(region))]
adata = adata[~(adata.obs['celltype.L2'].str.contains('Doublet'))]
adata = adata[~(adata.obs['celltype.L2'].str.contains('Not_sure'))]

if args.celltype_column == 'region_nt':
    adata.obs['region_nt'] = adata.obs['region_nt'].astype('str')
    adata.obs.loc[adata.obs.region_nt=="NN",'region_nt'] = adata.obs.loc[adata.obs.region_nt=="NN",'celltype.L1'].astype('str')
    adata.obs['region_nt'] = adata.obs['region_nt'].astype('category')

if args.method in ["memento-ht",'memento-binary']:
    df_frac = pd.read_csv('/data2st1/junyi/output/atac0416/frac_qc.csv')
    adata.obs['farcq'] = pd.merge(adata.obs,df_frac[['sample','farcq']],on='sample',how='left')['farcq'].astype('category').values
    adata.obs['fracHQP'] = pd.merge(adata.obs,
                                  df_frac[['sample','Fraction of high-quality fragments overlapping peaks']],
                                  on='sample',how='left')['Fraction of high-quality fragments overlapping peaks'].values

outfolder = os.path.join(args.output,celltype_column)
if not os.path.exists(outfolder):
    os.makedirs(outfolder)
for celltype in adata.obs[celltype_column].unique():
    try:
        print(f"Processing {celltype}")
        adata_subset = adata[adata.obs[celltype_column].str.contains(celltype)]
        base_name = f"{region}_{celltype}"
        base_name = base_name.replace(" ","_")
        base_name = base_name.replace("/","-")
        if os.path.exists(os.path.join(outfolder, f"{base_name}.h5ad")):
            print(f"File {base_name}.h5ad already exists, skipping.")
            continue
        else:
            adata_subset.write(os.path.join(outfolder, f"{base_name}.h5ad"))

    except Exception as e:
        print(f"Error processing {celltype}: {e}")
        continue