# %%
import numpy as np
import circe as ci
import scanpy as sc
import scipy as sp
import warnings
import os
import argparse
from sklearn.utils import shuffle
from scipy import stats
from statsmodels.stats.multitest import multipletests


warnings.filterwarnings('ignore')

# %%
# regions = ['AMY','HIP','PFC']
# celltypes = ['OPC-Oligo', 'Immune','Astro-Epen','Vascular','Neuron']

parser = argparse.ArgumentParser(description="Calculate the methlyation level for a given region")
parser.add_argument("--input", type=str, required=False, help="Input file for the h5ad generated by snapATAC2",
                    default="output/atac0416/3REGIONS_peak.h5ads")
parser.add_argument("--output", type=str, required=False, help="Output path of the result",
                    default="output/atac0416/cicre")
#parser.add_argument("--celltype", type=str, required=False, help="Select cell type in obs",default="Neuron")
parser.add_argument("--region", type=str, required=False, help="Brain region",default="PFC")
parser.add_argument("--celltype_column", type=str, required=False, help="Column for cell type",default="region_nt")
parser.add_argument("--condition", type=str, required=False, help="Cell type",default="MC")


args = parser.parse_args()

file = args.input
region = args.region
celltype_column = args.celltype_column
condition = args.condition
adata_all = sc.read_h5ad(file)
adata_all = adata_all[(adata_all.obs['sample'].str.contains(region)) & (adata_all.obs['expriment'].str.contains(condition))]

black_list = ['Immune','OPC-Oligo','Doublet','PFC Doublet','PFC Not sure','Not sure','Astro-Epen','Neuron']


print(f"Processing {region} {condition}")

celltypes = adata_all.obs[celltype_column].unique()

for celltype in celltypes:

    if celltype in black_list:
        print(f"Skip {celltype} in black list")
        continue
    # %%
    # region = 'AMY'
    # celltype = 'Vascular'
    celltype_name = celltype.replace("/","-").replace(" ","_")
    base_name = f"{region}_{celltype_name}_{condition}"

    if os.path.exists(os.path.join(args.output, f"{base_name}_circe.h5ad")):
        continue
    
    adata = adata_all[adata_all.obs[celltype_column]==celltype].copy()

    print(f"Processing {celltype} {condition},haveing {adata.shape[0]} cells")


    # %%
    sc.pp.filter_genes(adata, min_cells=3)
    sc.pp.filter_cells(adata, min_genes=200)


    # %%
    adata.var.index=adata.var.index.str.replace(":", "_").str.replace("-", "_")

    # %%
    # Column to use for stratification
    # if adata.shape[0] > 10000:
    #     stratify_column = 'sample'
    #     stratify_column = 'sample'

    #     # Number of cells to sample from each group
    #     n_samples_per_group = 2000

    #     # Perform stratified sampling
    #     sampled_indices = (
    #         adata.obs
    #         .groupby(stratify_column, group_keys=False)
    #         .apply(lambda x: x.sample(min(n_samples_per_group, len(x))))
    #         .index
    #     )
    #     adata  = adata[sampled_indices, :]
    if adata.shape[0] > 5000:
        adata = sc.pp.subsample(adata, n_obs=5000,copy=True)


    adata = ci.add_region_infos(adata)

    ci.compute_atac_network(
        adata, #metacells,
        organism="mouse",
    )

    final_score = ci.sliding_graphical_lasso(
        adata,
        n_samples=50,
        n_samples_maxtry=100,
        max_alpha_iteration=500,
        verbose=True
    )
    adata.varp['atac_network'] = final_score


    # %%
    circe_network = ci.extract_atac_links(adata) #metacells)


    # %%
    
    adata_shuffle =  adata.copy()

    shuffled_matrix = shuffle(adata_shuffle.X.T, random_state=42).T
    adata_shuffle.X = shuffled_matrix

    adata_shuffle = ci.add_region_infos(adata_shuffle)
    ci.compute_atac_network(
        adata_shuffle, #metacells,
        organism="mouse",
    )
    final_score = ci.sliding_graphical_lasso(
        adata_shuffle,
        n_samples=50,
        n_samples_maxtry=100,
        max_alpha_iteration=500,
        verbose=True
    )
    adata_shuffle.varp['atac_network'] = final_score
    shuffle_network = ci.extract_atac_links(adata_shuffle) #metacells)4

    mu,sigma = stats.norm.fit(shuffle_network['score'])

    # %%
    p_values = 1 - stats.norm.cdf(circe_network['score'], loc=mu, scale=sigma)

    # 3. FDR correction
    reject, pvals_corrected, _, _ = multipletests(
        p_values, alpha=0.001, method='fdr_bh')
    circe_network_fdr_corrected = circe_network.loc[reject]

    circe_network['pval_adj'] = pvals_corrected
    circe_network['pval'] = p_values
    circe_network.to_csv(os.path.join(args.output, f"{base_name}_circe_network.csv"))


    # %%
    ccans = ci.find_ccans(circe_network_fdr_corrected, seed=0)

    ccans.to_csv(os.path.join(args.output, f"{base_name}_ccans.csv"))

    # %%
    adata = ci.add_ccans(adata)

    try:
        adata.var['CCAN'] = adata.var['CCAN'].astype(str)
        adata.write(os.path.join(args.output, f"{base_name}_circe.h5ad"))
    except:
        print(f"Error in wirting h5ad {base_name}")
        continue



