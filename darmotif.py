# %%
import matplotlib.pyplot as plt
import anndata
import scanpy as sc
import snapatac2 as snap
import numpy as np
import pandas as pd
import os
import scanpy.external as sce
import argparse
#adata_concat = snap.read_dataset('output/mouse_brain.h5ads')

parser = argparse.ArgumentParser(description="Calculate the methlyation level for a given region")
parser.add_argument("--input", type=str, required=False, help="Input file for the h5ad generated by snapATAC2",
                    default="/data2st1/junyi/output/mouse_brain_dar.h5ad")
parser.add_argument("--output", type=str, required=False, help="Output path of the methylation level",
                    default="/data2st1/junyi/output/motif/")
parser.add_argument("--celltype", type=str, required=False, help="Select cell type in obs",default="Neuron")
parser.add_argument("--region", type=str, required=False, help="Brain region",default="PFC")


args = parser.parse_args()

# %%
file = args.input
region = args.region
celltype = args.celltype

# %%
adata = anndata.read_h5ad(file)


# %%
adata_AMY_neuron = adata[(adata.obs['sample'].str.contains(region)) & (adata.obs['celltype.L1.tab'].str.contains(celltype)) ].copy()
adata_AMY_neuron


# %%
adata_AMY_neuron.obs['expriment'] = adata_AMY_neuron.obs['sample'].str[:2]


# %%
snap.pl.umap(adata_AMY_neuron, color="sample", interactive=False,  marker_size=3)


# %%
snap.tl.macs3(adata_AMY_neuron, groupby='expriment')


# %%
adata_AMY_neuron

peaks = snap.tl.merge_peaks(adata_AMY_neuron.uns['macs3'], snap.genome.GRCm39)
peaks.head()


peak_mat = snap.pp.make_peak_matrix(adata_AMY_neuron, use_rep=peaks['Peaks'])
peak_mat


# %%
peak_mat.layers['raw'] = peak_mat.X.copy()

# %%
sc.pp.normalize_total(peak_mat)

# %%
sc.pp.log1p(peak_mat)

# %%
sc.tl.rank_genes_groups(peak_mat, groupby='expriment', method='wilcoxon',pts=True)

# %%
peak_mat.obsm['X_umap'] = adata_AMY_neuron.obsm['X_umap']

# %%
df = sc.get.rank_genes_groups_df(peak_mat, group='MC', key='rank_genes_groups',pval_cutoff=0.05)


base_name = f"{region}_{celltype}"
df.to_csv(f"{args.output}/{base_name}_MC_wilcoxon.csv")

# %%
sc.pl.umap(peak_mat, color=df.sort_values('logfoldchanges',ascending=False).head(10).names, size=50)

# %%
peak_mat.uns['rank_genes_groups']
# %%
df_mw = sc.get.rank_genes_groups_df(peak_mat, group='MW', key='rank_genes_groups',pval_cutoff=0.05)

# %%
df_mw.to_csv(f"{args.output}/{base_name}_MW_wilcoxon.csv")


marker_peaks = {"MC": df[df.logfoldchanges>0].set_index('names').index,"MW":df_mw[df_mw.logfoldchanges>0].set_index('names').index}

# %%
marker_peaks

# %%
snap.pl.regions(peak_mat, groupby='expriment', peaks=marker_peaks, interactive=False)


# %%
from snapatac2._snapatac2 import read_motifs, PyDNAMotif

def cis_bp_mouse(unique: bool = True , path="data/motifdb/Mus_musculus.meme") -> list[PyDNAMotif]:
    motifs = read_motifs(path)
    for motif in motifs:
        motif.name = motif.id.split('+')[0]
    if unique:
        unique_motifs = {}
        for motif in motifs:
            name = motif.name
            if (
                    name not in unique_motifs or 
                    unique_motifs[name].info_content() < motif.info_content()
               ):
               unique_motifs[name] = motif
        motifs = list(unique_motifs.values())
    return motifs


# %%
motifs = snap.tl.motif_enrichment(
    motifs=cis_bp_mouse(unique=True,path="data/motifdb/Mus_musculus.meme"),
    regions=marker_peaks,
    genome_fasta=snap.genome.GRCm39,
)


# %%
motifs['MC'].write_csv(f"{args.output}/{base_name}_MC_cisbp_motif.csv")

# %%
fig = snap.pl.motif_enrichment(motifs, max_fdr=0.0001, height=4000, interactive=False)
with open(f"{args.output}/{base_name}_MC_cisbp_motif.png", 'wb') as f:
    f.write(fig.data)  # Assuming 'im.data' contains the image data
# %%
motifs = snap.tl.motif_enrichment(
    motifs=cis_bp_mouse(unique=True,path="data/motifdb/uniprobe_mouse.meme"),
    regions=marker_peaks,
    genome_fasta=snap.genome.GRCm39,
)


# %%
snap.pl.motif_enrichment(motifs, max_fdr=0.0001, height=4000, interactive=False)

# %%
motifs['MC'].write_csv(f"{args.output}/{base_name}_MC_uniprobe_motif.csv")
fig = snap.pl.motif_enrichment(motifs, max_fdr=0.0001, height=4000, interactive=False)
with open(f"{args.output}/{base_name}_MC_uniprobe_motif.png", 'wb') as f:
    f.write(fig.data)  # Assuming 'im.data' contains the image data

